openapi: 3.0.0
info:
  version: 1.0.0
  title: Back End Dog API
  description: A simple webstie API introduction.
  contact: 
    name: Chan Tsz Yu
    email: 237025296@@stu.vtc.edu.hk
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://localhost:10888/api/v1'
    description: Development server
tags:
  - name: Users
    description: API endpoints for user management.
  - name: Dogs
    description: Access and perform CRUD operations on website application.
  - name: Login
    description: login user account
      

paths:
  /users/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the user
    get:
      tags:
        - Users
      description:
        Get user by id.
      responses:
        '200':
          description: user record.
          content:
            application/json:
              schema:
               type: object
               properties:              
               $ref: ./user.json#/definitions/user
        '404':
          description: User was not found in the DB table.
    put:
      tags:
        - Users
      description:
        Update user by ID of user table.
      requestBody:
        description: Modify user information record
        required: true
        content:
          application/json:
            schema:
              $ref: ./user.json#/definitions/user
      responses:
        '200':
          description: Update an user record.
        '404':
          description: User was not found in the DB table.
    delete:
      tags:
        - Users
      description:
        Delete user by ID.
      responses:
        '200':
          description: Delete of user record.
        '404':
          description: User was not found in the DB table.

  /users/:
    parameters:
    - in: query
      name: limit
      schema:
        type: integer
      description: number of records to display with 10 records/page
    - in: query
      name: page
      schema:
        type: integer
      description: starting page number to display
    - in: query
      name: fields
      schema:
        type: string
      description: fields to display
    - in: query
      name: q
      schema:
        type: string
      description: specifiy the search criteria for either fields of username or email
    get:
      tags:
        - Users
      description: Get all users
      responses:
       '200':
         description: Sucess
         content:
           application/json:
             schema:
               type: array               
               $ref: ./user.json#/definitions/user
       '404':
         description: Not Found  
    post:
      tags:
       - Users
      description: Create a new user account.
      requestBody:
        description: A new user data
        required: true
        content:
          application/json:
            schema:
              $ref: ./user.json#/definitions/user
      responses:
        '201':
          description: User created
        '400':
          description: Bad request, not meet the input require
  
  /users/login:
    post:
      tags:
       - Login
      description: Login user account.
      requestBody:
        description: login with username and password
        required: true
        content:
          application/json:
            schema:
             type: object
             properties:
              username:
                type: string
                description: The user name.
              password:
                type: string
                description: The user password.
      responses:
        '200':
          description: user record.
          content:
            application/json:
             schema:
               type: object
               properties:   
                 id:
                   type: integer
                   description: The id of user. 
                 username:
                   type: string
                   description: The user name.
                 email:
                   type: string
                   description: The user email.
                 avataurl:
                   type: string
                   description: The user avatar url.
                 role:
                   type: string
                   description: The user role.  
                 links:
                   type: uri
                   description: The link to user info by id.

        '404':
          description: User was not found in the DB table.
        
  /dogs/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the dog
    get:
      tags:
        - Dogs
      description:
        Get dog record by id.
      responses:
        '200':
          description: View of a dog record.
        '404':
          description: Dog was not found in the DB table.
    put:
      tags:
        - Dogs
      description:
        Update dog record by ID.
      requestBody:
        description: A new dog data
        required: true
        content:
          application/json:
            schema:
              $ref: ./dog.json#/definitions/dog     
      responses:
        '200':
          description: Updata a dog record.
        '404':
          description: Dog record was not found in the DB table.
    delete:
      tags:
        - Dogs
      description:
        Delete dog record by ID.
      responses:
        '200':
          description: Delete a dog record.
        '404':
          description: Dog record was not found in the DB table.
  /dogs/search:
    parameters:
    - in: query
      name: limit
      schema:
        type: integer
      description: number of  records to display with 10 records/page
    - in: query
      name: page
      schema:
        type: integer
      description: starting page no.to display
    - in: query
      name: fields
      schema:
        type: string
      description: fields to display
    - in: query
      name: q
      schema:
        type: string
      description: specifiy the search criteria  for either fields of dogname or breed
     
    get:
      tags:
      - Dogs
      description: Search dogs reocrd.
      responses:
        '200':
          description: dogs record.
          content:
            application/json:
             schema:
               type: object 
               properties:   
                 id:
                   type: integer
                   description: The id of article. 
                 dogname:
                   type: string
                   description: The name of dog.
                 breed:
                   type: string
                   description: breed of dog
                 summary:
                   type: string
                   description: summary of dog
                 locationid:
                   type: integer 
                   description: The id of location place.  
          '404':
            description: Not Found  
  /dogs/: 
    get:
      tags:
      - Dogs
      description: Get all dogs reocrd.
      responses:
        '200':
          description: dogs record.
          content:
            application/json:
             schema:
               type: object 
               properties:   
                 id:
                   type: integer
                   description: The id of dog. 
                 dogname:
                   type: string
                   description: The name of dog.
                 breed:
                   type: string
                   description: The breed of dog.
                 imageurl:
                   type: string
                   description: The link to image of dog.
                 summary:
                   type: string
                   description: summary of dog.
                 adopted:
                    type: boolean
                    description: The the adoption state.
                 locationid:
                    type: integer
                    description: The dog location place id.
                 writerid:
                   type: integer 
                   description: The id of writer.  
                 links:
                   type: uri array object
                   description: include four links to likes,fav,msg and self with articleid respectively eg.articleid=1 [{"likes":"https://localhost:10888/api/v1/dogs/1/likes"},{"fav":"https://localhost:10888/api/v1/articles/1/fav"},{"msg":"https://localhost:10888/api/v1/articles/1/msg"},{"self":"https:localhost:10888/api/v1/articles/1"}]
          '404':
            description: Not Found  
    post:
      tags:
       - Dogs
      description: Create a new dog record.
      requestBody:
        description: A new dog data
        required: true
        content:
          application/json:
            schema:
              $ref: ./dog.json#/definitions/dog
      responses:
        '201':
          description: Dog record created
        '400':
          description: Bad request, not meet the input require

    